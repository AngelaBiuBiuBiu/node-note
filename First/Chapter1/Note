Node打破了过去JavaScript只能在浏览器运行的局面。前后端编程环境统一，可以大大降低前后端转换所需要的上下文交换代价。

一、Node特点
1. 异步I/O：从语言层面很自然的进行并行I/O操作，每个调用之间无须等待之前的I/O调用结束。
2. 事件与回调函数
3. 单线程：在node中，JavaScript与其余线程是无法共享任何状态的
 (1)优点：不用像多线程编程那样处处在意状态的同步问题，这里也没有死锁的存在，也没有线程上下文交换所带来的性能上的开销。
 (2)缺点：
    ① 无法利用多核CPU
    ② 错误会引起整个应用的退出，应用的健壮性值得考虑
    ③ 大量计算占用CPU导致无法继续调用异步I/O
 Web Workers能够创建工作线程来进行计算，工作线程为了不阻塞主线程，通过消息传递的方式来传递运行结果，这也使得工作线程不能访问到主线程中的UI。
 Node采用了与Web Workers相同的思路来解决单线程中大计算量的问题：child_process
4. 跨平台


二、Node的应用场景
1. I/O密集型：Node面向网络且擅长并行I/O。优势主要在于Node利用事件循环的处理能力，而不是启动每一个线程为每一个请求服务，资源占用极少。
2. 是否不擅长CPU密集型业务：合理调度就可以
3. 分布式应用



三、Node的使用者
1. 前后端编程环境语言统一
2. Node带来的高性能I/O用于实时应用
3. 并行I/O使得使用者可以更高效的利用分布式环境
4. 并行I/O有效利用文档接口提升web渲染能力
5. 云计算平台提供Node支持
6. 游戏开发领域
7. 工具类应用